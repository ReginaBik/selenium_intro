** Setting up utilities in Java system and launching a browser:
1. System.setProperty("driverType",  "driverPath"); // this line sets the utilities to Java system
2. WebdDriver utilities = new ChromeDriver();  // this line creates and instance of the utilities

** Maximize browser:
utilities.manage().window().maximize(); // this line maximizes the current window if it is not already maximized
utilities.manage().window().fullscreen(): // this line fullscreens the current window if it is not already fullscreen

** Title validation & URL validation:
utilities.getTitle(); // this line returns the title of the current page as a String; returns null if title is not set for the page
utilities.getCurrentUrl(); // this line returns the URL of the current page as a String

** Selenium Navigation:
utilities.get() is used to navigate to a particular website, but it does not maintain the browser history and cookies. That's why , we cannot use forward, backward or refresh functions
utilities.navigate().to() is also used to navigate to a particular website , but it maintains the browser history and cookies. So, we can use forward, backward and refresh functions to navigate between the web pages

utilities.get("applicationURL"); // this line will navigate us to specified web application
utilities.navigate().to(); // this line is used to navigate a particular page
utilities.navigate().back(); // this line is used to navigate back to previous page
utilities.navigate().forward(); // this line is used to navigate forward to previously visited page
utilities.navigate().refresh(); // this line is used to refresh the current page

** Quit utilities:
utilities.close(); //this line closes only the current window
utilities.quit(); //this line exits the utilities, closing every associated windows, tabs, pop ups, etc.

There are mainly 2 methods helps us to findElements:
findElement() method returns a single web element and it can be stored in a WebElement variable
findElements() method returns a list of web elements and they can be stored in an ArrayList<WebElement>

All these methods are used with web elements and return true or false:
isDisplayed() method is used to verify the presence of a particular web element and it will return true if element is found, and false otherwise
isEnabled() is mostly used with buttons and it verifies if the web element is enabled or disabled
isSelected() is mostly used with radio buttons, dropdowns and checkboxes and it verifies if the web element is selected or not

SELENIUM LOCATORS (8):
1. className = to find web elements based on the unique class attribute values of the DOM.
2. id = most common ways of identifying elements on a web page. id for a web element always needs to be unique (1 of 1).
It is the fastest way of locating web elements and is most reliable(stable) methods for determining an element.
3. name = a web page can have multiple elements with the same name attribute. If locating by name, always make sure that the name attribute is unique in the DOM.
4. tagName = the tag name is the HTML tag, such as input, div, anchor tag, button, etc. The tagName locator returns all the elements from the page that has the specified tag.
5. linkText and 6. partialLinkText = used to locate web elements by using the hyperlink texts. Therefore web element must contain anchor (<a></a>) tags.
7. CSS Selector (2nd fastest). Syntax ---> CSS Selector: tagName[attribute='value']
8. XPath (most flexible + more methods). Syntax ---> Absolute XPath: /html/body/form/div/span/span
                                                     Relative XPath: //tagName[@attributeName='value']
NOTE: Like the other locator strategies, if multiple hyperlinks with the same texts are present on the page, then Selenium will always choose the FIRST one.
NOTE: name, link text, className, id, partial link text, tag name locators are looking for the given attribute name, and, finding the matching attribute value.

* CSS values in a style --> style = color: blue --> style[class='blue']
* NOTE FOR XPATH: IF CLASS HAS MORE THAN ONE CLASS VALUE THEN MUST INCLUDE ALL OF THEM
* NOTE FOR CSS: absolute path is not reliable to use as the path may change in future release.

** NOTE: DON'T USE DYNAMIC ATTRIBUTES AS LOCATOR AS THEY ARE CONSTANTLY CHANGING WITH GET BROWSING SESSION.
ENSURE ITS 1 OF 1 BY COPYING THE VALUE AND REFRESH AND SEE IF ITS STILL EXISTING AND IS 1 OF 1.

DOM FINDER: COMMAND + F
// TAG
# ID
. CLASS

